var documenterSearchIndex = {"docs":
[{"location":"wavelets/#Continuous-Wavelets-1","page":"Continuous Wavelets","title":"Continuous Wavelets","text":"","category":"section"},{"location":"wavelets/#","page":"Continuous Wavelets","title":"Continuous Wavelets","text":"The ContinuousWavelet library implements (for now) only two mother wavelets.","category":"page"},{"location":"wavelets/#The-Cauchy-or-Paul-Wavelet-1","page":"Continuous Wavelets","title":"The Cauchy or Paul Wavelet","text":"","category":"section"},{"location":"wavelets/#","page":"Continuous Wavelets","title":"Continuous Wavelets","text":"CauchyWavelet\nCauchyWavelet(α::Real; ϵ::Real=1e-2)","category":"page"},{"location":"wavelets/#ContinuousWavelet.CauchyWavelet","page":"Continuous Wavelets","title":"ContinuousWavelet.CauchyWavelet","text":"The Cauchy or Paul wavelet.\n\nIn contrast to the MorletWavelet, the Cauchy or Paul wavelet is a proper wavelet with a similar good localization in time and scale.\n\nThere are different definitions of the Cauchy wavelet around. Here one is implemented where the center frequency is always 1 irrespective of the value of α:\n\n g(t) = h(t) = left(1-ifrac2pitalpharight)^-(1+alpha)\n\nand its reproducing kernel\n\n P_gh(b a) = Gamma(2alpha+1)a^alpha+1left(1+a-fracibaright)^-(2alpha+1)\n\n\n\n\n\n","category":"type"},{"location":"wavelets/#ContinuousWavelet.CauchyWavelet-Tuple{Real}","page":"Continuous Wavelets","title":"ContinuousWavelet.CauchyWavelet","text":"CauchyWavelet(α::Real; ϵ::Real=1e-2)\n\nConstructs a new Cauchy wavelet, whith the given α specifying the time-frequency resolution. The optional keyword arguent ϵ specifies the cutoff at which the kernel evaluation gets truncated. It is defined as the fraction of total power loss of the mother wavelet. Smaller values of ϵ will increase the precision of the wavelet transform on the cost of longer kernels leading to slower convolutions.\n\n\n\n\n\n","category":"method"},{"location":"wavelets/#The-Morlet-Wavlet-1","page":"Continuous Wavelets","title":"The Morlet Wavlet","text":"","category":"section"},{"location":"wavelets/#","page":"Continuous Wavelets","title":"Continuous Wavelets","text":"MorletWavelet\nMorletWavelet(δ::Real; ϵ::Real=1e-3)","category":"page"},{"location":"wavelets/#ContinuousWavelet.MorletWavelet","page":"Continuous Wavelets","title":"ContinuousWavelet.MorletWavelet","text":"The Morlet wavelet.\n\n g(t) = sqrtfracdelta2piexp(2piit-t^2delta)\n\nwhere δ specifies the time-frequency resolution of the wavelet.\n\n\n\n\n\n","category":"type"},{"location":"wavelets/#ContinuousWavelet.MorletWavelet-Tuple{Real}","page":"Continuous Wavelets","title":"ContinuousWavelet.MorletWavelet","text":"MorletWavelet(δ::Real; ϵ::Real=1e-3)\n\nConstructs a new Morlet wavelet, whith the given dff parameter specifying the time-frequency resolution. The optional keyword arguent ϵ specifies the cutoff at which the kernel evaluation gets truncated. It is defined as the fraction of total power loss of the mother wavelet. Smaller values of ϵ will increase the precision of the wavelet transform on the cost of longer kernels leading to slower convolutions.\n\n\n\n\n\n","category":"method"},{"location":"wavelets/#","page":"Continuous Wavelets","title":"Continuous Wavelets","text":"All mother wavelets are derived from the abstract type","category":"page"},{"location":"wavelets/#","page":"Continuous Wavelets","title":"Continuous Wavelets","text":"ContinuousWavelet.GenericContinuousWavelet","category":"page"},{"location":"wavelets/#ContinuousWavelet.GenericContinuousWavelet","page":"Continuous Wavelets","title":"ContinuousWavelet.GenericContinuousWavelet","text":"Represents the base-class of all continuous wavelets.\n\n\n\n\n\n","category":"type"},{"location":"wavelets/#Methods-1","page":"Continuous Wavelets","title":"Methods","text":"","category":"section"},{"location":"wavelets/#","page":"Continuous Wavelets","title":"Continuous Wavelets","text":"ContinuousWavelet.eval_analysis\nContinuousWavelet.eval_synthesis\nContinuousWavelet.eval_repkern\nContinuousWavelet.cutoff_time\nContinuousWavelet.cutoff_freq","category":"page"},{"location":"wavelets/#ContinuousWavelet.eval_analysis","page":"Continuous Wavelets","title":"ContinuousWavelet.eval_analysis","text":"eval_analysis(wav::ContinuousWavelet.GenericContinuousWavelet, t::Float64)\n\nEvaluates the mother wavelet at timepoint t.\n\n\n\n\n\n","category":"function"},{"location":"wavelets/#ContinuousWavelet.eval_synthesis","page":"Continuous Wavelets","title":"ContinuousWavelet.eval_synthesis","text":"eval_synthesis(wav::ContinuousWavelet.GenericContinuousWavelet, t::Float64)\n\nEvaluates the mother synthesis wavelet at timepoint t.\n\n\n\n\n\n","category":"function"},{"location":"wavelets/#ContinuousWavelet.eval_repkern","page":"Continuous Wavelets","title":"ContinuousWavelet.eval_repkern","text":"eval_repkern(wav::ContinuousWavelet.GenericContinuousWavelet, a::Float64, b::Float64)\n\nEvaluates the reproducing kernel at scale a and time-point b.\n\n\n\n\n\n","category":"function"},{"location":"wavelets/#ContinuousWavelet.cutoff_time","page":"Continuous Wavelets","title":"ContinuousWavelet.cutoff_time","text":"cutoff_time(wav::ContinuousWavelet.GenericContinuousWavelet)\n\nReturns the cut-off time-point for the given wavelet at scale 1.\n\n\n\n\n\n","category":"function"},{"location":"wavelets/#ContinuousWavelet.cutoff_freq","page":"Continuous Wavelets","title":"ContinuousWavelet.cutoff_freq","text":"cutoff_freq(wav::ContinuousWavelet.GenericContinuousWavelet)\n\nReturns the cut-off frequency for the given wavelet at scale 1.\n\n\n\n\n\n","category":"function"},{"location":"coherence/#Coherence-analyses-1","page":"Coherence analyses","title":"Coherence analyses","text":"","category":"section"},{"location":"coherence/#","page":"Coherence analyses","title":"Coherence analyses","text":"coherence(wt::ContinuousWaveletTransform, X::AbstractArray{Float64, 2}; nsurrogate=0, α=0.05)\ncoherence(wt::ContinuousWaveletTransform, X::AbstractArray{Float64, 2}, Y::AbstractArray{Float64, 2}; nsurrogate=0, α=0.05)","category":"page"},{"location":"coherence/#ContinuousWavelet.coherence-Tuple{ContinuousWaveletTransform,AbstractArray{Float64,2}}","page":"Coherence analyses","title":"ContinuousWavelet.coherence","text":"coherence(wt::ContinuousWaveletTransform,\n          X::AbstractArray{Float64, 2};\n          nsurrogate=0, α=0.05)\n\nImplements the self-coherence of a set of time-series. The self-coherence is defined as\n\n C(X)(ba) = fracleftvert EleftmathcalWX(ba)rightrightvert^2EleftleftvertmathcalWX(ba)rightvert^2right =\n  fracleftvertmathcalWEleftXright(ba)rightvert^2EleftleftvertmathcalWX(ba)rightvert^2right\n\nThis measure can be interpreted as how coherent a process is from realization to realization. Typical applications are the analyses of EEG event-related potentials and similar time-series of repeated experiments.\n\nArguments\n\nwt: Specifies the wavelet transform to use.\nX: Specifies the time-series to analyze. Each single time-series (trial) is stored as a column in X.\n'nsurrogate': A keyword argument specifying the number of surrogate samples to generate from the given time-series for the estimation of the point-wise significant test. By default it is 0 and no surrogate samples are generated.\nα: A keyword arguement specifying the significance level for the point-wise significance test. By default set to α=0.05.\n\n\n\n\n\n","category":"method"},{"location":"coherence/#ContinuousWavelet.coherence-Tuple{ContinuousWaveletTransform,AbstractArray{Float64,2},AbstractArray{Float64,2}}","page":"Coherence analyses","title":"ContinuousWavelet.coherence","text":"coherence(wt::ContinuousWaveletTransform,\n          X::AbstractArray{Float64, 2}, Y::AbstractArray{Float64, 2};\n          nsurrogate=0, α=0.05)\n\nCanonical wavelet coherence as defined by\n\n C(X)(ba) = fracEleftmathcalWX(ba)mathcalWY^*(ba)right\n  EleftleftvertmathcalWX(ba)rightvertleftvertmathcalWY(ba)rightvertright\n\nThat is the normalized expectation value of the product of the two wavelet transformed, where z^* is the complex conjugate.\n\nIn contrast to the self-coherence, this analysis does estimate the coherence of a process to itself but the coherence between two observed processes. It is therefore necessary that the two sets of time-series X and Y are of the same shape. That is, each trial of X and Y must consists of the same number of samples (rows) and both sets must contain the same number of trials (columns).\n\nArguments\n\nwt: Specifies the wavelet transform to use.\nX: Specifies one time-series to analyze. Each single time-series (trial) is stored as a column   in X. Must be of same shape as Y.\nY: Specifies one time-series to analyze. Each single time-series (trial) is stored as a column   in Y. Must be of same shape as X.\n'nsurrogate': A keyword argument specifying the number of surrogate samples to generate from the   given time-series for the estimation of the point-wise significant test. By default it is 0   and no surrogate samples are generated.\nα: A keyword arguement specifying the significance level for the point-wise significance test.   By default set to α=0.05.\n\n\n\n\n\n","category":"method"},{"location":"coherence/#Coherence-analysis-result-1","page":"Coherence analyses","title":"Coherence analysis result","text":"","category":"section"},{"location":"coherence/#","page":"Coherence analyses","title":"Coherence analyses","text":"ContinuousWavelet.ContinuousWaveletCoherence\nPlots.contourf(A::ContinuousWaveletCoherence;  drawvalid=true, shadevalid=true, kw...)","category":"page"},{"location":"coherence/#ContinuousWavelet.ContinuousWaveletCoherence","page":"Coherence analyses","title":"ContinuousWavelet.ContinuousWaveletCoherence","text":"Represents a continuous wavelet coherence analysis.\n\nFields:\n\ncoh: The actual coherence as a complex value. The layout of this array follows the layout of ContinuousWaveletTransformed. That is, each voice is stored in a column, starting with the smallest scale.\nscales: The vector of scales at which the wavelet transform is performed.\nwavelet: The wavelet being used.\nα: The point-wise empirical signigicance level of the coherence analysis obtained by means of surrogate data. Holds NaN if no skipped.\n\n\n\n\n\n","category":"type"},{"location":"examples/#Examples-1","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Here are some examples of wavelet transforms and associated analyses.","category":"page"},{"location":"examples/#Wavelet-transform-1","page":"Examples","title":"Wavelet transform","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Wavelet transform of white noise using a CauchyWavelet with parameter α=10. This parameter specifies the time-frequency resolution of the transform. For larger α-values the frequency resolution is increased on the cost of a lower time resolution and vice-versa.","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"The wavelet transform is performed for 64 different scales equally spaced in the range [10, 100].","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"using ContinuousWavelet;\nusing Plots;\nusing Random: randn;\ngr();\n\nX = randn(1024);\nwav = CauchyWavelet(10.0);\nscales = LinRange(10,100, 64)\nwt = ContinuousWaveletTransform(wav, scales);\nwX = transform(wt, X);\n\ncontourf(wX)","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/#Wavelet-synthesis-1","page":"Examples","title":"Wavelet synthesis","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"TODO","category":"page"},{"location":"examples/#Coherence-analysis-1","page":"Examples","title":"Coherence analysis","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"TODO","category":"page"},{"location":"transform/#Wavelet-transform-1","page":"Wavelet transform","title":"Wavelet transform","text":"","category":"section"},{"location":"transform/#","page":"Wavelet transform","title":"Wavelet transform","text":"The continuous wavelet transform is just the convolution of some time-series x(t) with some dilated (by b) and scaled (by a) kernel g(fract-ba). The latter is the so-called mother wavelet. That is, the continuous wavelet transform is defined as","category":"page"},{"location":"transform/#","page":"Wavelet transform","title":"Wavelet transform","text":"mathcalWx(ba) = c_gint_-infty^infty x(t)g^*left(fract-baright)dt","category":"page"},{"location":"transform/#","page":"Wavelet transform","title":"Wavelet transform","text":"where z^* denotes the complex conjugate of z.","category":"page"},{"location":"transform/#","page":"Wavelet transform","title":"Wavelet transform","text":"The ContinuousWavelet package implements planned wavelet transforms. That is, the scaled kernels for each voice are pre-computed to save some time when computing several wavelet transforms using the same kernel on the same scales. These pre-computed kernels are stored in the ContinuousWaveletTransform object, representing a planned transform.","category":"page"},{"location":"transform/#","page":"Wavelet transform","title":"Wavelet transform","text":"ContinuousWaveletTransform\nContinuousWaveletTransform(::ContinuousWavelet.GenericContinuousWavelet, ::AbstractVector)","category":"page"},{"location":"transform/#ContinuousWavelet.ContinuousWaveletTransform","page":"Wavelet transform","title":"ContinuousWavelet.ContinuousWaveletTransform","text":"This struct represents a planned continuous wavelet transform. It contains the voices on which the transform is performed as well the pre-computed analysis wavelets.\n\nFields\n\nwavelet: Holds a reference to the wavelet to use for the transformation.\nblocks: The grouping of the voices of same kernel size for faster block-convolution.\nscales: The scales on which the wavelet transform will be performed.\nkernels: Matrix of evaluated kernels for the convolution.\n\n\n\n\n\n","category":"type"},{"location":"transform/#ContinuousWavelet.ContinuousWaveletTransform-Tuple{ContinuousWavelet.GenericContinuousWavelet,AbstractArray{T,1} where T}","page":"Wavelet transform","title":"ContinuousWavelet.ContinuousWaveletTransform","text":"ContinuousWaveletTransform(wav::GenericContinuousWavelet, scales::AbstractVector)\n\nConstructs a new wavelet transform for the given wavelet (wav) and scales. This constructor pre-computes the kernels for the given scales. It is therefore efficient to perform several transformations using transform() with the same ContinuousWaveletTransform object.\n\n\n\n\n\n","category":"method"},{"location":"transform/#","page":"Wavelet transform","title":"Wavelet transform","text":"The actual wavelet transform is then performed by the transform method.","category":"page"},{"location":"transform/#","page":"Wavelet transform","title":"Wavelet transform","text":"transform(::ContinuousWaveletTransform, ::AbstractArray{Float64,1})","category":"page"},{"location":"transform/#ContinuousWavelet.transform-Tuple{ContinuousWaveletTransform,AbstractArray{Float64,1}}","page":"Wavelet transform","title":"ContinuousWavelet.transform","text":"transform(trans::ContinuousWaveletTransform, x::AbstractArray{Float64,1})\n\nPerformes the planned continuous wavelet transfrom given by trans of the timeseries x. The result is a ContinuousWavelet.ContinuousWaveletTransformed object.\n\n\n\n\n\n","category":"method"},{"location":"transform/#Wavelet-transformed-1","page":"Wavelet transform","title":"Wavelet transformed","text":"","category":"section"},{"location":"transform/#","page":"Wavelet transform","title":"Wavelet transform","text":"The result of a continuous wavelet transform is stored in a ContinuousWavelet.ContinuousWaveletTransformed object. This object extends AbstractArray{Float64, 2}, thus the coefficients of the wavelet transformed can be accessed directly. Additionally, specialized methods are provided for plotting the wavelet transformed.","category":"page"},{"location":"transform/#","page":"Wavelet transform","title":"Wavelet transform","text":"ContinuousWavelet.ContinuousWaveletTransformed\nPlots.contourf(A::ContinuousWaveletTransformed; drawvalid=true, shadevalid=true, kw...)","category":"page"},{"location":"transform/#ContinuousWavelet.ContinuousWaveletTransformed","page":"Wavelet transform","title":"ContinuousWavelet.ContinuousWaveletTransformed","text":"Represents a wavelet transformed. Beside the wavelet coefficients, this object contains additional information about the wavelet transformed including the scales at which the transform was performed as well as the wavelet used. This object extends AbstractArray{Complex{Float64}, 2} thus allowing for direct access to the wavelet coefficients. Each voice is stored as a column, thus the number of rows matches the number of samples of the original time-series.\n\nFields\n\nwX: The actual wavelet coefficients, each column represents a single voice.\nscales: The scales at which the wavelet transform was performed.\nwavelet: The wavelet of the transform.\n\n\n\n\n\n","category":"type"},{"location":"#ContinuousWavelet.jl-Documentation-1","page":"ContinuousWavelet.jl Documentation","title":"ContinuousWavelet.jl Documentation","text":"","category":"section"},{"location":"#","page":"ContinuousWavelet.jl Documentation","title":"ContinuousWavelet.jl Documentation","text":"CurrentModule = ContinuousWavelet","category":"page"},{"location":"#","page":"ContinuousWavelet.jl Documentation","title":"ContinuousWavelet.jl Documentation","text":"ContinuousWavelet.jl is a Julia package providing continuous wavelet transformations and associated analyses like coherence analyses.","category":"page"},{"location":"#","page":"ContinuousWavelet.jl Documentation","title":"ContinuousWavelet.jl Documentation","text":"Pages = [\n        \"transform.md\",\n        \"wavelets.md\",\n        \"coherence.md\",\n        \"utils.md\",\n        \"examples.md\"\n]\nDepth = 2","category":"page"},{"location":"utils/#Utilities-1","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"utils/#Detrending-time-series-1","page":"Utilities","title":"Detrending time-series","text":"","category":"section"},{"location":"utils/#","page":"Utilities","title":"Utilities","text":"Offsets and trends in time-series may lead to significant edge-effects in the wavelet transformed. To detrend time series before performing the wavelet transform, the detrend method might be used.","category":"page"},{"location":"utils/#","page":"Utilities","title":"Utilities","text":"detrend(y::AbstractVector{V}, x::AbstractVector{U}=(1:length(y))) where {U,V}\ndetrend(y::AbstractArray{V,2}, x::AbstractVector{U}=(1:length(y))) where {U,V}\ndetrend!(y::AbstractVector{V}, x::AbstractVector{U}=(1:length(y))) where {U,V}\ndetrend!(y::AbstractArray{V,2}, x::AbstractVector{U}=(1:length(y))) where {U,V}","category":"page"},{"location":"utils/#ContinuousWavelet.detrend-Union{Tuple{AbstractArray{V,1}}, Tuple{V}, Tuple{U}, Tuple{AbstractArray{V,1},AbstractArray{U,1}}} where V where U","page":"Utilities","title":"ContinuousWavelet.detrend","text":"detrend(y::AbstractVector{V}, x::AbstractVector{U}=(1:length(y)))\n\nDetrends the given time-series. That is, fitting a linear function into y given x and subtracting the fit from the data in y. The function returns the detrended time-series.\n\n\n\n\n\n","category":"method"},{"location":"utils/#ContinuousWavelet.detrend-Union{Tuple{AbstractArray{V,2}}, Tuple{V}, Tuple{U}, Tuple{AbstractArray{V,2},AbstractArray{U,1}}} where V where U","page":"Utilities","title":"ContinuousWavelet.detrend","text":"detrend!(y::AbstractArray{V,2}, x::AbstractVector{U}=(1:length(y)))\n\nDetrends the given time-series. That is, fitting a linear function into every columns of y given x and subtracting the fit from the data in the corresponding column of y. The fuction returns the detrended time-series.\n\n\n\n\n\n","category":"method"},{"location":"utils/#ContinuousWavelet.detrend!-Union{Tuple{AbstractArray{V,1}}, Tuple{V}, Tuple{U}, Tuple{AbstractArray{V,1},AbstractArray{U,1}}} where V where U","page":"Utilities","title":"ContinuousWavelet.detrend!","text":"detrend!(y::AbstractVector{V}, x::AbstractVector{U}=(1:length(y)))\n\nIn-place detrends the given time-series. That is, fitting a linear function into y given x and subtracting the fit from the data in y.\n\n\n\n\n\n","category":"method"},{"location":"utils/#ContinuousWavelet.detrend!-Union{Tuple{AbstractArray{V,2}}, Tuple{V}, Tuple{U}, Tuple{AbstractArray{V,2},AbstractArray{U,1}}} where V where U","page":"Utilities","title":"ContinuousWavelet.detrend!","text":"detrend!(y::AbstractArray{V,2}, x::AbstractVector{U}=(1:length(y)))\n\nIn-place detrends the given time-series. That is, fitting a linear function into every columns of y given x and subtracting the fit from the data in the corresponding column of y.\n\n\n\n\n\n","category":"method"},{"location":"utils/#Generating-surrogate-time-series-1","page":"Utilities","title":"Generating surrogate time-series","text":"","category":"section"},{"location":"utils/#","page":"Utilities","title":"Utilities","text":"Frequently, it is necessary to generate surrogate time-series for some given observations. Particularly for coherence analyses, surrogate time-series provide means to assess the reliability of the coherence estimates. The ContiniuousWavelet library provides the surrogate method to generate power spectrum and therefore auto-correlation conserving surrogate time-series.","category":"page"},{"location":"utils/#","page":"Utilities","title":"Utilities","text":"These surrogate time-series are generated by performing a Fourier transform of the original time-series and randomizing the phases of these transformed time-series. The modulus of the Fourier transform is maintained. This ensures that the power spectrum and therefore the auto-correlation function of the original time-series is conserved.","category":"page"},{"location":"utils/#","page":"Utilities","title":"Utilities","text":"surrogate(A::AbstractArray{Float64, 1})\nsurrogate!(A::AbstractArray{Float64, 1})\nsurrogate(A::AbstractArray{Float64, 2})\nsurrogate!(A::AbstractArray{Float64, 2})","category":"page"},{"location":"utils/#ContinuousWavelet.surrogate-Tuple{AbstractArray{Float64,1}}","page":"Utilities","title":"ContinuousWavelet.surrogate","text":"surrogate(A::AbstractArray{Float64, 1})\n\nGenerates a new surrogate time-series for the given one by means of phase-randomization.\n\n\n\n\n\n","category":"method"},{"location":"utils/#ContinuousWavelet.surrogate!-Tuple{AbstractArray{Float64,1}}","page":"Utilities","title":"ContinuousWavelet.surrogate!","text":"surrogate(A::AbstractArray{Float64, 1})\n\nGenerates a new surrogate time-series in-place for the given one by means of phase-randomization.\n\n\n\n\n\n","category":"method"},{"location":"utils/#ContinuousWavelet.surrogate-Tuple{AbstractArray{Float64,2}}","page":"Utilities","title":"ContinuousWavelet.surrogate","text":"surrogate(A::AbstractArray{Float64, 1})\n\nGenerates a new surrogate time-series for each column of A by means of phase-randomization.\n\n\n\n\n\n","category":"method"},{"location":"utils/#ContinuousWavelet.surrogate!-Tuple{AbstractArray{Float64,2}}","page":"Utilities","title":"ContinuousWavelet.surrogate!","text":"surrogate(A::AbstractArray{Float64, 1})\n\nGenerates a new surrogate time-series in-place for each column of A by means of phase-randomization.\n\n\n\n\n\n","category":"method"}]
}
