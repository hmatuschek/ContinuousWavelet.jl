```julia; echo=false
using Plots
```
# Wavelet transform

The continuous wavelet transform is just the convolution of some time-series ``$x(t)$`` with some
dilated (by ``$b$``) and scaled (by ``$a$``) kernel ``$g(\frac{t-b}{a})$``. The latter is the
so-called *mother wavelet*. That is, the continuous wavelet transform is defined as
```math
\mathcal{W}[x](b,a) = c_{g}\,\int_{-\infty}^{\infty} x(t)\,g^*\left(\frac{t-b}{a}\right)\,dt\,,
```
where ``$z^*$`` denotes the complex conjugate of ``$z$``.

The `ContinuousWavelet` package implements planned wavelet transforms. That is, the scaled kernels
for each *voice* are pre-computed to save some time when computing several wavelet transforms using
the same kernel on the same scales. These pre-computed kernels are stored in the
`ContinuousWaveletTransform` object, representing a planned transform.
```@docs
ContinuousWaveletTransform
ContinuousWaveletTransform(::ContinuousWavelet.GenericContinuousWavelet, ::AbstractVector)
```

The actual wavelet transform is then performed by the `transform` method.
```@docs
transform(::ContinuousWaveletTransform, ::AbstractArray{Float64,1})
```

## Wavelet transformed
The result of a continuous wavelet transform is stored in a
`ContinuousWavelet.ContinuousWaveletTransformed` object. This object extends
`AbstractArray{Float64, 2}`, thus the coefficients of the wavelet transformed can be accessed
directly. Additionally, specialized methods are provided for plotting the wavelet transformed.

```@docs
ContinuousWavelet.ContinuousWaveletTransformed
Plots.contourf(A::ContinuousWaveletTransformed; drawvalid=true, shadevalid=true, kw...)
```
